// backend/data/dataManager.js
const users = require('./users');
const products = require('./products');
const collections = require('./collections');
const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh Cloudinary (n·∫øu s·ª≠ d·ª•ng)
if (process.env.CLOUDINARY_CLOUD_NAME) {
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
  });
}

class DataManager {
  constructor() {
    this.users = users;
    this.products = products;
    this.collections = collections;
  }

  // ================== USER MANAGEMENT ==================
  getUsers() {
    return this.users;
  }

  createSampleUsers() {
    // L√†m s·∫°ch d·ªØ li·ªáu users hi·ªán c√≥ (x√≥a _id, id kh√¥ng h·ª£p l·ªá)
    const cleanedUsers = this.users.map(user => {
      const { _id, id, ...cleanUser } = user; // X√≥a _id v√† id
      return {
        ...cleanUser,
        // ƒê·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        name: cleanUser.name || 'Unknown User',
        email: cleanUser.email || `user${Date.now()}@example.com`,
        password: cleanUser.password || '123456',
        role: cleanUser.role || 'customer'
      };
    });

    // T·∫°o th√™m users m·∫´u n·∫øu c·∫ßn
    const additionalUsers = [
      {
        name: "Sample Customer 1",
        email: "customer1@example.com",
        password: "123456",
        role: "customer",
        gender: "male",
        phone: "0901234567",
        address: "123 Nguyen Hue St",
        city: "Ho Chi Minh",
        district: "District 1",
        ward: "Ben Nghe Ward",
        birth: new Date('1995-06-15')
      },
      {
        name: "Sample Customer 2", 
        email: "customer2@example.com",
        password: "123456",
        role: "customer",
        gender: "female",
        phone: "0907654321",
        address: "456 Le Loi St",
        city: "Ho Chi Minh",
        district: "District 3", 
        ward: "Ward 1",
        birth: new Date('1992-08-22')
      }
    ];

    return [...cleanedUsers, ...additionalUsers];
  }

  // ================== COLLECTION MANAGEMENT ==================
  getCollections() {
    return this.collections;
  }

  createSampleCollections() {
    const sampleCollections = [
      {
        id: "summer",
        name: "Summer Collection",
        bannerUrl: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop",
        description: "B·ªô s∆∞u t·∫≠p m√πa h√® 2025 mang ƒë·∫øn l√†n gi√≥ m·ªõi v·ªõi nh·ªØng thi·∫øt k·∫ø tr·∫ª trung, nƒÉng ƒë·ªông v√† ƒë·∫ßy m√†u s·∫Øc, s·ª≠ d·ª•ng ch·∫•t li·ªáu nh·∫π m√°t, tho√°ng kh√≠, ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông ng√†y h√®.",
        products: []
      },
      {
        id: "winter", 
        name: "Winter Collection",
        bannerUrl: "https://images.unsplash.com/photo-1544966503-7cc4ac7b6201?w=800&h=600&fit=crop",
        description: "B·ªô s∆∞u t·∫≠p m√πa ƒë√¥ng 2025 l√† s·ª± k·∫øt h·ª£p gi·ªØa v·∫ª ƒë·∫πp hi·ªán ƒë·∫°i v√† c·∫£m gi√°c ·∫•m √°p, v·ªõi nh·ªØng thi·∫øt k·∫ø d√†y d·∫∑n, phom d√°ng √¥m v·ª´a v·∫∑n.",
        products: []
      },
      {
        id: "autumn",
        name: "Autumn Collection", 
        bannerUrl: "https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?w=800&h=600&fit=crop",
        description: "B·ªô s∆∞u t·∫≠p m√πa thu 2025 mang ƒë·∫øn h∆°i th·ªü d·ªãu d√†ng v√† s√¢u l·∫Øng c·ªßa th·ªùi kh·∫Øc chuy·ªÉn m√πa.",
        products: []
      },
      {
        id: "spring",
        name: "Spring Collection",
        bannerUrl: "https://images.unsplash.com/photo-1469334031218-e382a71b716b?w=800&h=600&fit=crop", 
        description: "B·ªô s∆∞u t·∫≠p m√πa xu√¢n 2025 t∆∞∆°i m·ªõi v·ªõi s·∫Øc m√†u r·ª±c r·ª° v√† thi·∫øt k·∫ø nh·∫π nh√†ng.",
        products: []
      }
    ];

    return sampleCollections;
  }

  // ================== PRODUCT MANAGEMENT ==================
  getProducts() {
    return this.products;
  }

  // H√†m upload ·∫£nh l√™n Cloudinary (t√πy ch·ªçn)
  async uploadImageToCloudinary(imageUrl, folder = 'wukudada-products') {
    try {
      if (!process.env.CLOUDINARY_CLOUD_NAME) {
        console.log('‚ö†Ô∏è Cloudinary ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng URL g·ªëc t·ª´ Unsplash');
        return imageUrl;
      }

      console.log(`üì§ ƒêang upload: ${imageUrl}`);
      const result = await cloudinary.uploader.upload(imageUrl, {
        folder: folder,
        public_id: `product_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        overwrite: true,
        resource_type: "image",
        transformation: [
          { width: 500, height: 600, crop: "fill" },
          { quality: "auto", format: "auto" }
        ]
      });

      console.log(`‚úÖ Upload th√†nh c√¥ng: ${result.secure_url}`);
      return result.secure_url;
    } catch (error) {
      console.error(`‚ùå L·ªói upload ·∫£nh: ${error.message}`);
      console.log(`üîÑ Fallback: s·ª≠ d·ª•ng URL g·ªëc t·ª´ Unsplash`);
      return imageUrl; // Fallback v·ªÅ URL g·ªëc t·ª´ Unsplash
    }
  }

  // X·ª≠ l√Ω ·∫£nh cho products (c√≥ th·ªÉ upload ho·∫∑c gi·ªØ nguy√™n)
  async processProductImages(products, uploadToCloudinary = false) {
    console.log(`üîÑ ƒêang x·ª≠ l√Ω ${products.length} s·∫£n ph·∫©m...`);
    
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      if (uploadToCloudinary && product.images && product.images.length > 0) {
        console.log(`üì∑ X·ª≠ l√Ω ·∫£nh cho s·∫£n ph·∫©m: ${product.name}`);
        
        for (let j = 0; j < product.images.length; j++) {
          const currentUrl = product.images[j].url;
          product.images[j].url = await this.uploadImageToCloudinary(currentUrl);
          
          // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    }

    return products;
  }

  // T·∫°o products v·ªõi ·∫£nh sample t·ª´ Unsplash
  createSampleProducts() {
    // L√†m s·∫°ch d·ªØ li·ªáu products hi·ªán c√≥
    const cleanedProducts = this.products.map(product => {
      const { _id, ...cleanProduct } = product; // X√≥a _id ƒë·ªÉ MongoDB t·ª± t·∫°o
      return cleanProduct;
    });

    const sampleProducts = [
      {
        name: "√Åo Thun Nam Basic Premium",
        description: "√Åo thun nam basic ch·∫•t li·ªáu cotton cao c·∫•p, form regular fit tho·∫£i m√°i, ph√π h·ª£p m·∫∑c h√†ng ng√†y v√† d·∫°o ph·ªë.",
        price: 350000,
        discountPrice: 299000,
        countInStock: 100,
        sku: `AT-NAM-${Date.now()}-001`,
        // sku: `AT-NAM-PREMIUM-${Date.now()}`, 
        category: "√Åo ph√¥ng",
        brand: "Wukudada",
        sizes: ["S", "M", "L", "XL", "XXL"],
        colors: ["ƒêen", "Tr·∫Øng", "X√°m", "Navy"],
        collection: "summer",
        material: "100% Cotton",
        gender: "Men",
        images: [
          {
            url: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500&h=600&fit=crop",
            altText: "√Åo thun nam basic ƒëen"
          },
          {
            url: "https://images.unsplash.com/photo-1583743814966-8936f37f27bf?w=500&h=600&fit=crop", 
            altText: "√Åo thun nam basic tr·∫Øng"
          }
        ],
        isFeatured: true,
        isPublished: true,
        rating: 4.5,
        numReviews: 125,
        tags: ["basic", "cotton", "nam", "h√†ng ng√†y"],
        metaTitle: "√Åo Thun Nam Basic Premium - Wukudada",
        metaDescription: "√Åo thun nam basic cotton cao c·∫•p, form regular fit tho·∫£i m√°i",
        metaKeywords: ["√°o thun nam", "basic", "cotton"],
        dimensions: {
          length: 70,
          width: 52, 
          height: 1,
          weight: 0.25
        }
      },
      {
        name: "V√°y Midi N·ªØ Elegant", 
        description: "V√°y midi n·ªØ thi·∫øt k·∫ø thanh l·ªãch, ch·∫•t li·ªáu chiffon m·ªÅm m·∫°i, form A-line t√¥n d√°ng, ph√π h·ª£p d·ª± ti·ªác.",
        price: 750000,
        discountPrice: 649000,
        countInStock: 50,
        sku: `V-NU-${Date.now()}-002`,
        category: "V√°y",
        brand: "Wukudada", 
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["ƒêen", "Navy", "ƒê·ªè ƒë√¥"],
        collection: "autumn",
        material: "100% Chiffon",
        gender: "Women",
        images: [
          {
            url: "https://images.unsplash.com/photo-1566479179817-7c3c8c86e2e1?w=500&h=600&fit=crop",
            altText: "V√°y midi n·ªØ elegant ƒëen"
          }
        ],
        isFeatured: true,
        isPublished: true,
        rating: 4.8,
        numReviews: 89,
        tags: ["v√°y", "midi", "elegant", "chiffon"],
        metaTitle: "V√°y Midi N·ªØ Elegant - Wukudada",
        metaDescription: "V√°y midi n·ªØ chiffon m·ªÅm m·∫°i, form A-line t√¥n d√°ng",
        metaKeywords: ["v√°y midi", "elegant", "chiffon"],
        dimensions: {
          length: 85,
          width: 45,
          height: 1, 
          weight: 0.3
        }
      },
      {
        name: "Qu·∫ßn Jean Nam Slim Fit",
        description: "Qu·∫ßn jean nam form slim fit, ch·∫•t li·ªáu denim cao c·∫•p co gi√£n nh·∫π, t√¥n d√°ng v√† tho·∫£i m√°i.",
        price: 850000,
        discountPrice: 749000,
        countInStock: 75,
        sku: `QJ-NAM-${Date.now()}-003`,
        category: "Qu·∫ßn jean", 
        brand: "Wukudada",
        sizes: ["28", "29", "30", "31", "32", "33", "34"],
        colors: ["Xanh ƒë·∫≠m", "ƒêen", "Xanh nh·∫°t"],
        collection: "winter",
        material: "98% Cotton, 2% Spandex",
        gender: "Men",
        images: [
          {
            url: "https://images.unsplash.com/photo-1542272604-787c3835535d?w=500&h=600&fit=crop",
            altText: "Qu·∫ßn jean nam slim fit xanh ƒë·∫≠m"
          }
        ],
        isFeatured: false,
        isPublished: true,
        rating: 4.6,
        numReviews: 156,
        tags: ["jean", "slim fit", "nam", "denim"],
        metaTitle: "Qu·∫ßn Jean Nam Slim Fit - Wukudada", 
        metaDescription: "Qu·∫ßn jean nam slim fit denim cao c·∫•p, t√¥n d√°ng",
        metaKeywords: ["qu·∫ßn jean nam", "slim fit", "denim"],
        dimensions: {
          length: 105,
          width: 38,
          height: 2,
          weight: 0.6
        }
      }
    ];

    return [...cleanedProducts, ...sampleProducts];
  }

  // ================== MAIN PROCESSING METHODS ==================
  
  // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
  async getAllData(options = {}) {
    const {
      uploadImages = false,
      includeExistingData = true,
      createSamples = true
    } = options;

    console.log('üöÄ DataManager: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu...');

    // L·∫•y users
    const users = includeExistingData ? this.getUsers() : [];
    const finalUsers = createSamples ? this.createSampleUsers() : users;

    // L·∫•y collections  
    const collections = includeExistingData ? this.getCollections() : [];
    const finalCollections = createSamples ? this.createSampleCollections() : collections;

    // L·∫•y v√† x·ª≠ l√Ω products
    const products = includeExistingData ? this.getProducts() : [];
    const sampleProducts = createSamples ? this.createSampleProducts() : [];
    const allProducts = [...products, ...sampleProducts];
    
    const finalProducts = await this.processProductImages(allProducts, uploadImages);

    console.log('‚úÖ DataManager: Ho√†n th√†nh x·ª≠ l√Ω d·ªØ li·ªáu');
    console.log(`üìä Th·ªëng k√™: ${finalUsers.length} users, ${finalCollections.length} collections, ${finalProducts.length} products`);

    return {
      users: finalUsers,
      collections: finalCollections, 
      products: finalProducts
    };
  }

  // Ph∆∞∆°ng th·ª©c l∆∞u v√†o file JSON (backup)
  async saveToFile(data, filename = 'processed-data.json') {
    try {
      const filePath = path.join(__dirname, filename);
      await fs.promises.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
      console.log(`üíæ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o: ${filePath}`);
    } catch (error) {
      console.error(`‚ùå L·ªói l∆∞u file: ${error.message}`);
    }
  }
}

module.exports = new DataManager();